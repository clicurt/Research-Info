if (detectedKeypoints[i].empty()) {
  std::cout << "There is at least one week day with no associated values.\n";
  kpVector.push_back(to_string(0) + ","  + to_string(0) + "," + to_string(0.));
} else {
  std::cout << "Fully populated.\n";
  if (detectedKeypoints[i][j].point.x >= 0 && detectedKeypoints[i][j].point.x <= input.cols) {
    // 
    point_x = detectedKeypoints[i][j].point.x;
  } else {
    point_x = 0;
  }
  // if (detectedKeypoints.at(i).at(j).) return;
  if (detectedKeypoints[i][j].point.y >= 0 && detectedKeypoints[i][j].point.y <= input.rows) {
    // 
    point_y = detectedKeypoints[i][j].point.y;
  } else {
    point_y = 0;
  }

  if (detectedKeypoints[i][j].score <= 1 && detectedKeypoints[i][j].score > 0 && !std::isnan(score))
    score = detectedKeypoints[i][j].score;
  else
    score = 0;
  kpVector.push_back(to_string(point_x) + ","  + to_string(point_y) + "," + to_string(score));
}




	cv::Point maxLoc;

	for (int i = 0; i < detectedKeypoints.size(); i++) {
		for (int j = 0; j < detectedKeypoints[i].size(); j++) {
			if (detectedKeypoints.at(i).size() < numberOfPersons) {
				detectedKeypoints.at(i).push_back(KeyPoint(maxLoc, 0.00));
			}
		}
	}
  
  kpVector.push_back(to_string(detectedKeypointsCopy.at(i).at(j).point.x) 
			+ ","  
			+ to_string(detectedKeypointsCopy.at(i).at(j).point.y)
			+ "," 
			+ to_string(detectedKeypointsCopy.at(i).at(j).score));
