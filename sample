#include "opencv2/opencv_modules.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/features2d/features2d.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/xfeatures2d/nonfree.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <stdio.h>
#include <iostream>

using namespace std;
using namespace cv;
using namespace cv::xfeatures2d;

int main(int argc, char **argv)
{
    // Mat img_1, img_2;
    Mat img;

    // Load image in grayscale format
    img = imread("/home/ub/Pictures/puppy_100.jpg", IMREAD_GRAYSCALE);

    // Rotate the input image without loosing the corners
    // Point center = Point(img_1.cols / 2, img_1.rows / 2);
    // double angle = 45, scale = 1;
    // Mat rot = getRotationMatrix2D(center, angle, scale);
    // Rect bbox = cv::RotatedRect(center, img_1.size(), angle).boundingRect();
    // rot.at<double>(0,2) += bbox.width/2.0 - center.x;
    // rot.at<double>(1,2) += bbox.height/2.0 - center.y;
    // warpAffine(img_1, img_2, rot, bbox.size());

    // SIFT feature detector
    // SiftFeatureDetector detector;
    string algo = "SURF";

    Mat descriptors;

    if (algo == "SIFT")
    {
        Ptr<SIFT> ptrSift = SIFT::create();
        std::vector<KeyPoint> keypoints;
        ptrSift->detect(img, keypoints);
        Ptr<SiftDescriptorExtractor> sift = SiftDescriptorExtractor::create();
        sift->compute(img, keypoints, descriptors);
    }

    if (algo == "SURF")
    {
        Ptr<SURF> ptrSurf = SURF::create();
        std::vector<KeyPoint> keypoints;
        ptrSurf->detect(img, keypoints);
        Ptr<SurfDescriptorExtractor> surf = SurfDescriptorExtractor::create();
        surf->compute(img, keypoints, descriptors);
    }

    if (algo == "ORB")
    {
        Ptr<ORB> ptrOrb = ORB::create();
        std::vector<KeyPoint> keypoints;
        ptrOrb->detect(img, keypoints);
        ptrOrb->detectAndCompute(img, noArray(), keypoints, descriptors);
    }

    if (algo == "BRIEF")
    {
        Ptr<ORB> ptrOrb = ORB::create();
        std::vector<KeyPoint> keypoints;
        ptrOrb->detect(img, keypoints);
        // auto featureExtractor = BriefDescriptorExtractor
        
        // ptrOrb->detectAndCompute(img, noArray(), keypoints, descriptors);
    }

    cout <<  "Descriptors (" << descriptors.rows << "," << descriptors.cols << ")" << endl;

    waitKey(0);
    return 0;
}



if (descriptors.isContinuous()) {
    descriptorBinary.assign(descriptors.data, descriptors.data + descriptors.total()*descriptors.channels());
} else {
    for (int i = 0; i < descriptors.rows; ++i) {
        descriptorBinary.insert(descriptorBinary.end(), descriptors.ptr<uchar>(i), descriptors.ptr<uchar>(i)+descriptors.cols*descriptors.channels());
    }
}
