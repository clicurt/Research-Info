// --------------- OpenPose C++ API Tutorial - Example 5 - Body from images and multi GPU ---------------
// It reads images, process them, and display them with the pose (and optionally hand and face) keypoints. In addition,
// it includes all the OpenPose configuration flags (enable/disable hand, face, output saving, etc.).

// Third-party dependencies
#include <opencv2/opencv.hpp>
// Command-line user interface
#define OPENPOSE_FLAGS_DISABLE_PRODUCER
#define OPENPOSE_FLAGS_DISABLE_DISPLAY
#include <openpose/flags.hpp>
// OpenPose dependencies
#include <openpose/headers.hpp>
//#include <boost/algorithm/string/join.hpp>

// Custom OpenPose flags
// Producer
DEFINE_string(image_path, "examples/media/COCO_val2014_000000000415.jpg",
    "Process a directory of images. Read all standard formats (jpg, png, bmp, etc.).");
// OpenPose
DEFINE_bool(latency_is_irrelevant_and_computer_with_lots_of_ram, false,
    "If false, it will read and then then process images right away. If true, it will first store all the frames and"
    " later process them (slightly faster). However: 1) Latency will hugely increase (no frames will be processed"
    " until they have all been read). And 2) The program might go out of RAM memory with long videos or folders with"
    " many images (so the computer might freeze).");
// Display
DEFINE_bool(no_display, true,
    "Enable to disable the visual display.");

// This worker will just read and return all the jpg files in a directory
bool display(const std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
{
    try
    {
        // User's displaying/saving/other processing here
            // datum.cvOutputData: rendered frame with pose or heatmaps
            // datum.poseKeypoints: Array<float> with the estimated pose
        if (datumsPtr != nullptr && !datumsPtr->empty())
        {
            // Display image and sleeps at least 1 ms (it usually sleeps ~5-10 msec to display the image)
            const cv::Mat cvMat = OP_OP2CVCONSTMAT(datumsPtr->at(0)->cvOutputData);
            if (!cvMat.empty())
                cv::imshow(OPEN_POSE_NAME_AND_VERSION + " - Tutorial C++ API", cvMat);
            else
                op::opLog("Empty cv::Mat as output.", op::Priority::High, __LINE__, __FUNCTION__, __FILE__);
        }
        else
            op::opLog("Nullptr or empty datumsPtr found.", op::Priority::High);
        const auto key = (char)cv::waitKey(1);
        return (key == 27);
    }
    catch (const std::exception& e)
    {
        op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
        return true;
    }
}

std::vector<std::string> split_string(const std::string& str,
    const std::string& delimiter)
{
    std::vector<std::string> strings;

    std::string::size_type pos = 0;
    std::string::size_type prev = 0;
    while ((pos = str.find(delimiter, prev)) != std::string::npos)
    {
        strings.push_back(str.substr(prev, pos - prev));
        prev = pos + 1;
    }

    // To get the last substring (or only, if delimiter is not found)
    strings.push_back(str.substr(prev));

    return strings;
}

void printKeypoints(const std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
{
    try
    {
        // Extract pose keypoints
        if (datumsPtr != nullptr && !datumsPtr->empty())
        {
             // Accesing each element of the keypoints
             op::opLog("\nKeypoints:", op::Priority::High);
             const auto& poseKeypoints = datumsPtr->at(0)->poseKeypoints;
             op::opLog("Person pose keypoints:", op::Priority::High);

             std::string joint1, joint2, joint3, joint4, joint5, joint6, joint7, joint8, joint9, joint10, joint11, joint12, joint13, joint14, joint15, joint16, joint18, joint17;
             std::string valueToPrint1;
             for (auto person = 0 ; person < poseKeypoints.getSize(0) ; person++)
             {
                 const auto nose = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 0);
                 const auto x1 = poseKeypoints[nose];
                 const auto y1 = poseKeypoints[nose + 1];
                 const auto score1 = poseKeypoints[nose + 2];
                 joint1 = std::to_string(x1) + "," + std::to_string(y1) + "," + std::to_string(score1);

                 const auto neck = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 1);
                 const auto x2 = poseKeypoints[neck];
                 const auto y2 = poseKeypoints[neck + 1];
                 const auto score2 = poseKeypoints[neck + 2];
                 joint2 = std::to_string(x2) + "," + std::to_string(y2) + "," + std::to_string(score2);

                 const auto rShoulder = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 2);
                 const auto x3 = poseKeypoints[rShoulder];
                 const auto y3 = poseKeypoints[rShoulder + 1];
                 const auto score3 = poseKeypoints[rShoulder + 2];
                 joint3 = std::to_string(x3) + "," + std::to_string(y3) + "," + std::to_string(score3);

                 const auto rElbow = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 3);
                 const auto x4 = poseKeypoints[rElbow];
                 const auto y4 = poseKeypoints[rElbow + 1];
                 const auto score4 = poseKeypoints[rElbow + 2];
                 joint4 = std::to_string(x4) + "," + std::to_string(y4) + "," + std::to_string(score4);

                 const auto rWrist = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 4);
                 const auto x5 = poseKeypoints[rWrist];
                 const auto y5 = poseKeypoints[rWrist + 1];
                 const auto score5 = poseKeypoints[rWrist + 2];
                 joint5 = std::to_string(x5) + "," + std::to_string(y5) + "," + std::to_string(score5);

                 const auto lShoulder = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 5);
                 const auto x6 = poseKeypoints[lShoulder];
                 const auto y6 = poseKeypoints[lShoulder + 1];
                 const auto score6 = poseKeypoints[lShoulder + 2];
                 joint6 = std::to_string(x6) + "," + std::to_string(y6) + "," + std::to_string(score6);

                 const auto lElbow = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 6);
                 const auto x7 = poseKeypoints[lElbow];
                 const auto y7 = poseKeypoints[lElbow + 1];
                 const auto score7 = poseKeypoints[lElbow + 2];
                 joint7 = std::to_string(x7) + "," + std::to_string(y7) + "," + std::to_string(score7);

                 const auto lWrist = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 7);
                 const auto x8 = poseKeypoints[lWrist];
                 const auto y8 = poseKeypoints[lWrist + 1];
                 const auto score8 = poseKeypoints[lWrist + 2];
                 joint8 = std::to_string(x8) + "," + std::to_string(y8) + "," + std::to_string(score8);

                 const auto rHip = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 8);
                 const auto x9 = poseKeypoints[rHip];
                 const auto y9 = poseKeypoints[rHip + 1];
                 const auto score9 = poseKeypoints[rHip + 2];
                 joint9 = std::to_string(x9) + "," + std::to_string(y9) + "," + std::to_string(score9);

                 const auto rKnee = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 9);
                 const auto x10 = poseKeypoints[rKnee];
                 const auto y10 = poseKeypoints[rKnee + 1];
                 const auto score10 = poseKeypoints[rKnee + 2];
                 joint10 = std::to_string(x10) + "," + std::to_string(y10) + "," + std::to_string(score10);

                 const auto rAnkle = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 10);
                 const auto x11 = poseKeypoints[rAnkle];
                 const auto y11 = poseKeypoints[rAnkle + 1];
                 const auto score11 = poseKeypoints[rAnkle + 2];
                 joint11 = std::to_string(x11) + "," + std::to_string(y11) + "," + std::to_string(score11);

                 const auto lHip = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 11);
                 const auto x12 = poseKeypoints[rHip];
                 const auto y12 = poseKeypoints[rHip + 1];
                 const auto score12 = poseKeypoints[rHip + 2];
                 joint12 = std::to_string(x12) + "," + std::to_string(y12) + "," + std::to_string(score12);

                 const auto lKnee = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 12);
                 const auto x13 = poseKeypoints[lKnee];
                 const auto y13 = poseKeypoints[lKnee + 1];
                 const auto score13 = poseKeypoints[lKnee + 2];
                 joint13 = std::to_string(x13) + "," + std::to_string(y13) + "," + std::to_string(score13);

                 const auto lAnkle = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 13);
                 const auto x14 = poseKeypoints[lAnkle];
                 const auto y14 = poseKeypoints[lAnkle + 1];
                 const auto score14 = poseKeypoints[lAnkle + 2];
                 joint14 = std::to_string(x14) + "," + std::to_string(y14) + "," + std::to_string(score14);

                 const auto rEye = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 14);
                 const auto x15 = poseKeypoints[rEye];
                 const auto y15 = poseKeypoints[rEye + 1];
                 const auto score15 = poseKeypoints[rEye + 2];
                 joint15 = std::to_string(x15) + "," + std::to_string(y15) + "," + std::to_string(score15);

                 const auto lEye = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 15);
                 const auto x16 = poseKeypoints[lEye];
                 const auto y16 = poseKeypoints[lEye + 1];
                 const auto score16 = poseKeypoints[lEye + 2];
                 joint16 = std::to_string(x16) + "," + std::to_string(y16) + "," + std::to_string(score16);

                 const auto rEar = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 16);
                 const auto x17 = poseKeypoints[rEar];
                 const auto y17 = poseKeypoints[rEar + 1];
                 const auto score17 = poseKeypoints[rEar + 2];
                 joint17 = std::to_string(x17) + "," + std::to_string(y17) + "," + std::to_string(score17);

                 const auto lEar = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 17);
                 const auto x18 = poseKeypoints[lEar];
                 const auto y18 = poseKeypoints[lEar + 1];
                 const auto score18 = poseKeypoints[lEar + 2];
                 joint18 = std::to_string(x18) + "," + std::to_string(y18) + "," + std::to_string(score18);

                 //const auto Background = poseKeypoints.getSize(2) * (person * poseKeypoints.getSize(1) + 3);
                 //const auto x4 = poseKeypoints[rElbow];
                 //const auto y4 = poseKeypoints[rElbow + 1];
                 //const auto score4 = poseKeypoints[rElbow + 2];
                 //joint4 = std::to_string(x4) + "," + std::to_string(y4) + "," + std::to_string(score4);

                 op::opLog("Person " + std::to_string(person) + " (x, y, score):", op::Priority::High);
                 op::opLog(joint1, op::Priority::High);
                 op::opLog(joint2, op::Priority::High);
                 op::opLog(joint3, op::Priority::High);
                 op::opLog(joint4, op::Priority::High);
                 op::opLog(joint5, op::Priority::High);
                 op::opLog(joint6, op::Priority::High);
                 op::opLog(joint7, op::Priority::High);
                 op::opLog(joint8, op::Priority::High);
                 op::opLog(joint9, op::Priority::High);
                 op::opLog(joint10, op::Priority::High);
                 op::opLog(joint11, op::Priority::High);
                 op::opLog(joint12, op::Priority::High);
                 op::opLog(joint13, op::Priority::High);
                 op::opLog(joint14, op::Priority::High);
                 op::opLog(joint15, op::Priority::High);
                 op::opLog(joint16, op::Priority::High);
                 op::opLog(joint17, op::Priority::High);
                 op::opLog(joint18, op::Priority::High);
             }
        }
        else
            op::opLog("Nullptr or empty datumsPtr found.", op::Priority::High);
    }
    catch (const std::exception& e)
    {
        op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
    }
}

void configureWrapper(op::Wrapper& opWrapper)
{
    try
    {
        // Configuring OpenPose
        // logging_level
        op::checkBool(
            0 <= FLAGS_logging_level && FLAGS_logging_level <= 255, "Wrong logging_level value.",
            __LINE__, __FUNCTION__, __FILE__);
        op::ConfigureLog::setPriorityThreshold((op::Priority)FLAGS_logging_level);
        op::Profiler::setDefaultX(FLAGS_profile_speed);

        // Applying user defined configuration - GFlags to program variables
        // outputSize
        const auto outputSize = op::flagsToPoint(op::String(FLAGS_output_resolution), "-1x-1");
        // netInputSize
        const auto netInputSize = op::flagsToPoint(op::String(FLAGS_net_resolution), "-1x368");
        // faceNetInputSize
        const auto faceNetInputSize = op::flagsToPoint(op::String(FLAGS_face_net_resolution), "368x368 (multiples of 16)");
        // handNetInputSize
        const auto handNetInputSize = op::flagsToPoint(op::String(FLAGS_hand_net_resolution), "368x368 (multiples of 16)");
        // poseMode
        const auto poseMode = op::flagsToPoseMode(FLAGS_body);
        // poseModel
        const auto poseModel = op::flagsToPoseModel("COCO");
        //const auto poseModel = op::flagsToPoseModel(op::String(FLAGS_model_pose));
        // JSON saving
        if (!FLAGS_write_keypoint.empty())
            op::opLog(
                "Flag `write_keypoint` is deprecated and will eventually be removed. Please, use `write_json`"
                " instead.", op::Priority::Max);
        // keypointScaleMode
        const auto keypointScaleMode = op::flagsToScaleMode(FLAGS_keypoint_scale);
        // heatmaps to add
        const auto heatMapTypes = op::flagsToHeatMaps(FLAGS_heatmaps_add_parts, FLAGS_heatmaps_add_bkg,
            FLAGS_heatmaps_add_PAFs);
        const auto heatMapScaleMode = op::flagsToHeatMapScaleMode(FLAGS_heatmaps_scale);
        // >1 camera view?
        const auto multipleView = (FLAGS_3d || FLAGS_3d_views > 1);
        // Face and hand detectors
        const auto faceDetector = op::flagsToDetector(FLAGS_face_detector);
        const auto handDetector = op::flagsToDetector(FLAGS_hand_detector);
        // Enabling Google Logging
        const bool enableGoogleLogging = true;

        // Pose configuration (use WrapperStructPose{} for default and recommended configuration)
        const op::WrapperStructPose wrapperStructPose{
            poseMode, netInputSize, FLAGS_net_resolution_dynamic, outputSize, keypointScaleMode, FLAGS_num_gpu,
            FLAGS_num_gpu_start, FLAGS_scale_number, (float)FLAGS_scale_gap,
            op::flagsToRenderMode(FLAGS_render_pose, multipleView), poseModel, !FLAGS_disable_blending,
            (float)FLAGS_alpha_pose, (float)FLAGS_alpha_heatmap, FLAGS_part_to_show, op::String(FLAGS_model_folder),
            heatMapTypes, heatMapScaleMode, FLAGS_part_candidates, (float)FLAGS_render_threshold,
            FLAGS_number_people_max, FLAGS_maximize_positives, FLAGS_fps_max, op::String(FLAGS_prototxt_path),
            op::String(FLAGS_caffemodel_path), (float)FLAGS_upsampling_ratio, enableGoogleLogging };
        opWrapper.configure(wrapperStructPose);
        //// Face configuration (use op::WrapperStructFace{} to disable it)
        //const op::WrapperStructFace wrapperStructFace{
        //    FLAGS_face, faceDetector, faceNetInputSize,
        //    op::flagsToRenderMode(FLAGS_face_render, multipleView, FLAGS_render_pose),
        //    (float)FLAGS_face_alpha_pose, (float)FLAGS_face_alpha_heatmap, (float)FLAGS_face_render_threshold };
        //opWrapper.configure(wrapperStructFace);
        //// Hand configuration (use op::WrapperStructHand{} to disable it)
        //const op::WrapperStructHand wrapperStructHand{
        //    FLAGS_hand, handDetector, handNetInputSize, FLAGS_hand_scale_number, (float)FLAGS_hand_scale_range,
        //    op::flagsToRenderMode(FLAGS_hand_render, multipleView, FLAGS_render_pose), (float)FLAGS_hand_alpha_pose,
        //    (float)FLAGS_hand_alpha_heatmap, (float)FLAGS_hand_render_threshold };
        //opWrapper.configure(wrapperStructHand);
        //// Extra functionality configuration (use op::WrapperStructExtra{} to disable it)
        //const op::WrapperStructExtra wrapperStructExtra{
        //    FLAGS_3d, FLAGS_3d_min_views, FLAGS_identification, FLAGS_tracking, FLAGS_ik_threads };
        //opWrapper.configure(wrapperStructExtra);
        // Output (comment or use default argument to disable any output)
        /*const op::WrapperStructOutput wrapperStructOutput{
            FLAGS_cli_verbose, op::String(FLAGS_write_keypoint), op::stringToDataFormat(FLAGS_write_keypoint_format),
            op::String(FLAGS_write_json), op::String(FLAGS_write_coco_json), FLAGS_write_coco_json_variants,
            FLAGS_write_coco_json_variant, op::String(FLAGS_write_images), op::String(FLAGS_write_images_format),
            op::String(FLAGS_write_video), FLAGS_write_video_fps, FLAGS_write_video_with_audio,
            op::String(FLAGS_write_heatmaps), op::String(FLAGS_write_heatmaps_format), op::String(FLAGS_write_video_3d),
            op::String(FLAGS_write_video_adam), op::String(FLAGS_write_bvh), op::String(FLAGS_udp_host),
            op::String(FLAGS_udp_port) };
        opWrapper.configure(wrapperStructOutput);*/
        // No GUI. Equivalent to: opWrapper.configure(op::WrapperStructGui{});
        // Set to single-thread (for sequential processing and/or debugging and/or reducing latency)
        if (FLAGS_disable_multi_thread)
            opWrapper.disableMultiThreading();
    }
    catch (const std::exception& e)
    {
        op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
    }
}

int tutorialApiCpp()
{
    try
    {
        op::opLog("Starting OpenPose demo...", op::Priority::High);
        const auto opTimer = op::getTimerInit();

        // Configuring OpenPose
        op::opLog("Configuring OpenPose...", op::Priority::High);
        op::Wrapper opWrapper{ op::ThreadManagerMode::Asynchronous };
        configureWrapper(opWrapper);
        // Increase maximum wrapper queue size
        if (FLAGS_latency_is_irrelevant_and_computer_with_lots_of_ram)
            opWrapper.setDefaultMaxSizeQueues(std::numeric_limits<long long>::max());

        // Starting OpenPose
        op::opLog("Starting thread(s)...", op::Priority::High);
        opWrapper.start();

        // Read frames on directory
        //const auto imagePaths = op::getFilesOnDirectory(FLAGS_image_dir, op::Extensions::Images);

        // Process and display images
        const cv::Mat cvImageToProcess = cv::imread(FLAGS_image_path);
        const op::Matrix imageToProcess = OP_CV2OPCONSTMAT(cvImageToProcess);
        auto datumProcessed = opWrapper.emplaceAndPop(imageToProcess);
        if (datumProcessed != nullptr)
        {
            printKeypoints(datumProcessed);
            if (!FLAGS_no_display)
                display(datumProcessed);
        }
        else
            op::opLog("Image could not be processed.", op::Priority::High);

        // Measuring total time
        op::printTime(opTimer, "OpenPose demo successfully finished. Total time: ", " seconds.", op::Priority::High);

        // Return
        return 0;
    }
    catch (const std::exception&)
    {
        return -1;
    }
}

int main(int argc, char* argv[])
{
    // Parsing command line flags
    gflags::ParseCommandLineFlags(&argc, &argv, true);

    // Running tutorialApiCpp
    return tutorialApiCpp();
}
